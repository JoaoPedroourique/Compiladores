Terminals unused in grammar

    TK_PR_THEN
    TK_PR_FOREACH
    TK_PR_SWITCH
    TK_PR_CASE
    TK_PR_CLASS
    TK_PR_PRIVATE
    TK_PR_PUBLIC
    TK_PR_PROTECTED
    TK_PR_END
    TK_PR_DEFAULT
    TK_OC_AND
    TK_OC_OR
    TOKEN_ERRO


Rules useless in parser due to conflicts

   66 param: TK_IDENTIFICADOR


State 149 conflicts: 2 reduce/reduce
State 151 conflicts: 2 reduce/reduce
State 191 conflicts: 1 shift/reduce


Grammar

    0 $accept: programa $end

    1 programa: ε
    2         | decl programa
    3         | func programa

    4 decl: TK_PR_STATIC type list
    5     | type list

    6 estrutura: TK_IDENTIFICADOR '[' TK_LIT_INT ']'
    7          | TK_IDENTIFICADOR

    8 type: TK_PR_INT
    9     | TK_PR_FLOAT
   10     | TK_PR_CHAR
   11     | TK_PR_BOOL
   12     | TK_PR_STRING

   13 list: estrutura ';'
   14     | estrutura ',' list

   15 func: TK_PR_STATIC func_aux
   16     | func_aux

   17 func_aux: type TK_IDENTIFICADOR '(' param_list ')' command_block

   18 param_list: ε
   19           | func_param
   20           | func_param ',' param_list

   21 func_param: TK_PR_CONST type TK_IDENTIFICADOR
   22           | type TK_IDENTIFICADOR

   23 command_block: '{' command_list '}'

   24 command_list: ε
   25             | simple_command command_list

   26 simple_command: local_decl ';'
   27               | attribution ';'
   28               | input_op ';'
   29               | output_op ';'
   30               | func_call ';'
   31               | return_op ';'
   32               | break_op ';'
   33               | continue_op ';'
   34               | shift_op ';'
   35               | cond_flow ';'
   36               | iter_flow ';'

   37 local_decl: TK_PR_STATIC TK_PR_CONST type local_list
   38           | TK_PR_CONST type local_list
   39           | TK_PR_STATIC type local_list
   40           | type local_list

   41 value: TK_IDENTIFICADOR
   42      | literal

   43 literal: literal_numeric
   44        | literal_alphabetic
   45        | literal_boolean

   46 literal_numeric: TK_LIT_INT
   47                | TK_LIT_FLOAT

   48 literal_alphabetic: TK_LIT_CHAR
   49                   | TK_LIT_STRING

   50 literal_boolean: TK_LIT_FALSE
   51                | TK_LIT_TRUE

   52 local_list: local_decl_aux local_list_aux

   53 local_list_aux: ε
   54               | ',' local_decl_aux local_list_aux

   55 local_decl_aux: TK_IDENTIFICADOR
   56               | TK_IDENTIFICADOR TK_OC_LE value

   57 attribution: estrutura '=' expression

   58 input_op: TK_PR_INPUT TK_IDENTIFICADOR

   59 output_op: TK_PR_OUTPUT TK_IDENTIFICADOR
   60          | TK_PR_OUTPUT literal

   61 func_call: TK_IDENTIFICADOR '(' params ')'

   62 params: param
   63       | param ',' params

   64 param: ε
   65      | literal
   66      | TK_IDENTIFICADOR
   67      | expression

   68 return_op: TK_PR_RETURN expression

   69 break_op: TK_PR_BREAK

   70 continue_op: TK_PR_CONTINUE

   71 shift_op: estrutura TK_OC_SL TK_LIT_INT
   72         | estrutura TK_OC_SR TK_LIT_INT

   73 expression: arithmetic
   74           | logic
   75           | ternary

   76 arithmetic: arithmetic_operand
   77           | un_arithmetic_operator arithmetic_operand
   78           | un_arithmetic_operator arithmetic_operand bin_arithmetic_operator arithmetic
   79           | arithmetic_operand bin_arithmetic_operator arithmetic

   80 arithmetic_operand: estrutura
   81                   | literal_numeric
   82                   | func_call

   83 bin_arithmetic_operator: '+'
   84                        | '-'
   85                        | '*'
   86                        | '/'
   87                        | '%'
   88                        | '^'

   89 un_arithmetic_operator: '+'
   90                       | '-'
   91                       | '&'
   92                       | '*'
   93                       | '#'

   94 un_logic_operator: '!'
   95                  | '?'

   96 bin_logic_operator: '|'
   97                   | '&'
   98                   | '|' '|'
   99                   | '&' '&'

  100 relational_op: TK_OC_LE
  101              | TK_OC_EQ
  102              | TK_OC_GE
  103              | TK_OC_NE
  104              | '>'
  105              | '<'

  106 ternary: expression '?' expression ':' expression

  107 logic: arithmetic relational_op arithmetic
  108      | un_logic_operator arithmetic_operand logic
  109      | arithmetic_operand bin_logic_operator arithmetic_operand logic

  110 cond_flow: TK_PR_IF '(' expression ')' command_block
  111          | TK_PR_IF '(' expression ')' command_block TK_PR_ELSE command_block

  112 iter_flow: TK_PR_FOR '(' attribution ':' expression ':' attribution ')' command_block
  113          | TK_PR_WHILE '(' expression ')' TK_PR_DO command_block


Terminals, with rules where they appear

    $end (0) 0
    '!' (33) 94
    '#' (35) 93
    '%' (37) 87
    '&' (38) 91 97 99
    '(' (40) 17 61 110 111 112 113
    ')' (41) 17 61 110 111 112 113
    '*' (42) 85 92
    '+' (43) 83 89
    ',' (44) 14 20 54 63
    '-' (45) 84 90
    '/' (47) 86
    ':' (58) 106 112
    ';' (59) 13 26 27 28 29 30 31 32 33 34 35 36
    '<' (60) 105
    '=' (61) 57
    '>' (62) 104
    '?' (63) 95 106
    '[' (91) 6
    ']' (93) 6
    '^' (94) 88
    '{' (123) 23
    '|' (124) 96 98
    '}' (125) 23
    error (256)
    TK_PR_INT (258) 8
    TK_PR_FLOAT (259) 9
    TK_PR_BOOL (260) 11
    TK_PR_CHAR (261) 10
    TK_PR_STRING (262) 12
    TK_PR_IF (263) 110 111
    TK_PR_THEN (264)
    TK_PR_ELSE (265) 111
    TK_PR_WHILE (266) 113
    TK_PR_DO (267) 113
    TK_PR_INPUT (268) 58
    TK_PR_OUTPUT (269) 59 60
    TK_PR_RETURN (270) 68
    TK_PR_CONST (271) 21 37 38
    TK_PR_STATIC (272) 4 15 37 39
    TK_PR_FOREACH (273)
    TK_PR_FOR (274) 112
    TK_PR_SWITCH (275)
    TK_PR_CASE (276)
    TK_PR_BREAK (277) 69
    TK_PR_CONTINUE (278) 70
    TK_PR_CLASS (279)
    TK_PR_PRIVATE (280)
    TK_PR_PUBLIC (281)
    TK_PR_PROTECTED (282)
    TK_PR_END (283)
    TK_PR_DEFAULT (284)
    TK_OC_LE (285) 56 100
    TK_OC_GE (286) 102
    TK_OC_EQ (287) 101
    TK_OC_NE (288) 103
    TK_OC_AND (289)
    TK_OC_OR (290)
    TK_OC_SL (291) 71
    TK_OC_SR (292) 72
    TK_LIT_INT (293) 6 46 71 72
    TK_LIT_FLOAT (294) 47
    TK_LIT_FALSE (295) 50
    TK_LIT_TRUE (296) 51
    TK_LIT_CHAR (297) 48
    TK_LIT_STRING (298) 49
    TK_IDENTIFICADOR (299) 6 7 17 21 22 41 55 56 58 59 61 66
    TOKEN_ERRO (300)


Nonterminals, with rules where they appear

    $accept (69)
        on left: 0
    programa (70)
        on left: 1 2 3
        on right: 0 2 3
    decl (71)
        on left: 4 5
        on right: 2
    estrutura (72)
        on left: 6 7
        on right: 13 14 57 71 72 80
    type (73)
        on left: 8 9 10 11 12
        on right: 4 5 17 21 22 37 38 39 40
    list (74)
        on left: 13 14
        on right: 4 5 14
    func (75)
        on left: 15 16
        on right: 3
    func_aux (76)
        on left: 17
        on right: 15 16
    param_list (77)
        on left: 18 19 20
        on right: 17 20
    func_param (78)
        on left: 21 22
        on right: 19 20
    command_block (79)
        on left: 23
        on right: 17 110 111 112 113
    command_list (80)
        on left: 24 25
        on right: 23 25
    simple_command (81)
        on left: 26 27 28 29 30 31 32 33 34 35 36
        on right: 25
    local_decl (82)
        on left: 37 38 39 40
        on right: 26
    value (83)
        on left: 41 42
        on right: 56
    literal (84)
        on left: 43 44 45
        on right: 42 60 65
    literal_numeric (85)
        on left: 46 47
        on right: 43 81
    literal_alphabetic (86)
        on left: 48 49
        on right: 44
    literal_boolean (87)
        on left: 50 51
        on right: 45
    local_list (88)
        on left: 52
        on right: 37 38 39 40
    local_list_aux (89)
        on left: 53 54
        on right: 52 54
    local_decl_aux (90)
        on left: 55 56
        on right: 52 54
    attribution (91)
        on left: 57
        on right: 27 112
    input_op (92)
        on left: 58
        on right: 28
    output_op (93)
        on left: 59 60
        on right: 29
    func_call (94)
        on left: 61
        on right: 30 82
    params (95)
        on left: 62 63
        on right: 61 63
    param (96)
        on left: 64 65 66 67
        on right: 62 63
    return_op (97)
        on left: 68
        on right: 31
    break_op (98)
        on left: 69
        on right: 32
    continue_op (99)
        on left: 70
        on right: 33
    shift_op (100)
        on left: 71 72
        on right: 34
    expression (101)
        on left: 73 74 75
        on right: 57 67 68 106 110 111 112 113
    arithmetic (102)
        on left: 76 77 78 79
        on right: 73 78 79 107
    arithmetic_operand (103)
        on left: 80 81 82
        on right: 76 77 78 79 108 109
    bin_arithmetic_operator (104)
        on left: 83 84 85 86 87 88
        on right: 78 79
    un_arithmetic_operator (105)
        on left: 89 90 91 92 93
        on right: 77 78
    un_logic_operator (106)
        on left: 94 95
        on right: 108
    bin_logic_operator (107)
        on left: 96 97 98 99
        on right: 109
    relational_op (108)
        on left: 100 101 102 103 104 105
        on right: 107
    ternary (109)
        on left: 106
        on right: 75
    logic (110)
        on left: 107 108 109
        on right: 74 108 109
    cond_flow (111)
        on left: 110 111
        on right: 35
    iter_flow (112)
        on left: 112 113
        on right: 36


State 0

    0 $accept: • programa $end

    TK_PR_INT     shift, and go to state 1
    TK_PR_FLOAT   shift, and go to state 2
    TK_PR_BOOL    shift, and go to state 3
    TK_PR_CHAR    shift, and go to state 4
    TK_PR_STRING  shift, and go to state 5
    TK_PR_STATIC  shift, and go to state 6

    $default  reduce using rule 1 (programa)

    programa  go to state 7
    decl      go to state 8
    type      go to state 9
    func      go to state 10
    func_aux  go to state 11


State 1

    8 type: TK_PR_INT •

    $default  reduce using rule 8 (type)


State 2

    9 type: TK_PR_FLOAT •

    $default  reduce using rule 9 (type)


State 3

   11 type: TK_PR_BOOL •

    $default  reduce using rule 11 (type)


State 4

   10 type: TK_PR_CHAR •

    $default  reduce using rule 10 (type)


State 5

   12 type: TK_PR_STRING •

    $default  reduce using rule 12 (type)


State 6

    4 decl: TK_PR_STATIC • type list
   15 func: TK_PR_STATIC • func_aux

    TK_PR_INT     shift, and go to state 1
    TK_PR_FLOAT   shift, and go to state 2
    TK_PR_BOOL    shift, and go to state 3
    TK_PR_CHAR    shift, and go to state 4
    TK_PR_STRING  shift, and go to state 5

    type      go to state 12
    func_aux  go to state 13


State 7

    0 $accept: programa • $end

    $end  shift, and go to state 14


State 8

    2 programa: decl • programa

    TK_PR_INT     shift, and go to state 1
    TK_PR_FLOAT   shift, and go to state 2
    TK_PR_BOOL    shift, and go to state 3
    TK_PR_CHAR    shift, and go to state 4
    TK_PR_STRING  shift, and go to state 5
    TK_PR_STATIC  shift, and go to state 6

    $default  reduce using rule 1 (programa)

    programa  go to state 15
    decl      go to state 8
    type      go to state 9
    func      go to state 10
    func_aux  go to state 11


State 9

    5 decl: type • list
   17 func_aux: type • TK_IDENTIFICADOR '(' param_list ')' command_block

    TK_IDENTIFICADOR  shift, and go to state 16

    estrutura  go to state 17
    list       go to state 18


State 10

    3 programa: func • programa

    TK_PR_INT     shift, and go to state 1
    TK_PR_FLOAT   shift, and go to state 2
    TK_PR_BOOL    shift, and go to state 3
    TK_PR_CHAR    shift, and go to state 4
    TK_PR_STRING  shift, and go to state 5
    TK_PR_STATIC  shift, and go to state 6

    $default  reduce using rule 1 (programa)

    programa  go to state 19
    decl      go to state 8
    type      go to state 9
    func      go to state 10
    func_aux  go to state 11


State 11

   16 func: func_aux •

    $default  reduce using rule 16 (func)


State 12

    4 decl: TK_PR_STATIC type • list
   17 func_aux: type • TK_IDENTIFICADOR '(' param_list ')' command_block

    TK_IDENTIFICADOR  shift, and go to state 16

    estrutura  go to state 17
    list       go to state 20


State 13

   15 func: TK_PR_STATIC func_aux •

    $default  reduce using rule 15 (func)


State 14

    0 $accept: programa $end •

    $default  accept


State 15

    2 programa: decl programa •

    $default  reduce using rule 2 (programa)


State 16

    6 estrutura: TK_IDENTIFICADOR • '[' TK_LIT_INT ']'
    7          | TK_IDENTIFICADOR •
   17 func_aux: type TK_IDENTIFICADOR • '(' param_list ')' command_block

    '['  shift, and go to state 21
    '('  shift, and go to state 22

    $default  reduce using rule 7 (estrutura)


State 17

   13 list: estrutura • ';'
   14     | estrutura • ',' list

    ';'  shift, and go to state 23
    ','  shift, and go to state 24


State 18

    5 decl: type list •

    $default  reduce using rule 5 (decl)


State 19

    3 programa: func programa •

    $default  reduce using rule 3 (programa)


State 20

    4 decl: TK_PR_STATIC type list •

    $default  reduce using rule 4 (decl)


State 21

    6 estrutura: TK_IDENTIFICADOR '[' • TK_LIT_INT ']'

    TK_LIT_INT  shift, and go to state 25


State 22

   17 func_aux: type TK_IDENTIFICADOR '(' • param_list ')' command_block

    TK_PR_INT     shift, and go to state 1
    TK_PR_FLOAT   shift, and go to state 2
    TK_PR_BOOL    shift, and go to state 3
    TK_PR_CHAR    shift, and go to state 4
    TK_PR_STRING  shift, and go to state 5
    TK_PR_CONST   shift, and go to state 26

    $default  reduce using rule 18 (param_list)

    type        go to state 27
    param_list  go to state 28
    func_param  go to state 29


State 23

   13 list: estrutura ';' •

    $default  reduce using rule 13 (list)


State 24

   14 list: estrutura ',' • list

    TK_IDENTIFICADOR  shift, and go to state 30

    estrutura  go to state 17
    list       go to state 31


State 25

    6 estrutura: TK_IDENTIFICADOR '[' TK_LIT_INT • ']'

    ']'  shift, and go to state 32


State 26

   21 func_param: TK_PR_CONST • type TK_IDENTIFICADOR

    TK_PR_INT     shift, and go to state 1
    TK_PR_FLOAT   shift, and go to state 2
    TK_PR_BOOL    shift, and go to state 3
    TK_PR_CHAR    shift, and go to state 4
    TK_PR_STRING  shift, and go to state 5

    type  go to state 33


State 27

   22 func_param: type • TK_IDENTIFICADOR

    TK_IDENTIFICADOR  shift, and go to state 34


State 28

   17 func_aux: type TK_IDENTIFICADOR '(' param_list • ')' command_block

    ')'  shift, and go to state 35


State 29

   19 param_list: func_param •
   20           | func_param • ',' param_list

    ','  shift, and go to state 36

    $default  reduce using rule 19 (param_list)


State 30

    6 estrutura: TK_IDENTIFICADOR • '[' TK_LIT_INT ']'
    7          | TK_IDENTIFICADOR •

    '['  shift, and go to state 21

    $default  reduce using rule 7 (estrutura)


State 31

   14 list: estrutura ',' list •

    $default  reduce using rule 14 (list)


State 32

    6 estrutura: TK_IDENTIFICADOR '[' TK_LIT_INT ']' •

    $default  reduce using rule 6 (estrutura)


State 33

   21 func_param: TK_PR_CONST type • TK_IDENTIFICADOR

    TK_IDENTIFICADOR  shift, and go to state 37


State 34

   22 func_param: type TK_IDENTIFICADOR •

    $default  reduce using rule 22 (func_param)


State 35

   17 func_aux: type TK_IDENTIFICADOR '(' param_list ')' • command_block

    '{'  shift, and go to state 38

    command_block  go to state 39


State 36

   20 param_list: func_param ',' • param_list

    TK_PR_INT     shift, and go to state 1
    TK_PR_FLOAT   shift, and go to state 2
    TK_PR_BOOL    shift, and go to state 3
    TK_PR_CHAR    shift, and go to state 4
    TK_PR_STRING  shift, and go to state 5
    TK_PR_CONST   shift, and go to state 26

    $default  reduce using rule 18 (param_list)

    type        go to state 27
    param_list  go to state 40
    func_param  go to state 29


State 37

   21 func_param: TK_PR_CONST type TK_IDENTIFICADOR •

    $default  reduce using rule 21 (func_param)


State 38

   23 command_block: '{' • command_list '}'

    TK_PR_INT         shift, and go to state 1
    TK_PR_FLOAT       shift, and go to state 2
    TK_PR_BOOL        shift, and go to state 3
    TK_PR_CHAR        shift, and go to state 4
    TK_PR_STRING      shift, and go to state 5
    TK_PR_IF          shift, and go to state 41
    TK_PR_WHILE       shift, and go to state 42
    TK_PR_INPUT       shift, and go to state 43
    TK_PR_OUTPUT      shift, and go to state 44
    TK_PR_RETURN      shift, and go to state 45
    TK_PR_CONST       shift, and go to state 46
    TK_PR_STATIC      shift, and go to state 47
    TK_PR_FOR         shift, and go to state 48
    TK_PR_BREAK       shift, and go to state 49
    TK_PR_CONTINUE    shift, and go to state 50
    TK_IDENTIFICADOR  shift, and go to state 51

    $default  reduce using rule 24 (command_list)

    estrutura       go to state 52
    type            go to state 53
    command_list    go to state 54
    simple_command  go to state 55
    local_decl      go to state 56
    attribution     go to state 57
    input_op        go to state 58
    output_op       go to state 59
    func_call       go to state 60
    return_op       go to state 61
    break_op        go to state 62
    continue_op     go to state 63
    shift_op        go to state 64
    cond_flow       go to state 65
    iter_flow       go to state 66


State 39

   17 func_aux: type TK_IDENTIFICADOR '(' param_list ')' command_block •

    $default  reduce using rule 17 (func_aux)


State 40

   20 param_list: func_param ',' param_list •

    $default  reduce using rule 20 (param_list)


State 41

  110 cond_flow: TK_PR_IF • '(' expression ')' command_block
  111          | TK_PR_IF • '(' expression ')' command_block TK_PR_ELSE command_block

    '('  shift, and go to state 67


State 42

  113 iter_flow: TK_PR_WHILE • '(' expression ')' TK_PR_DO command_block

    '('  shift, and go to state 68


State 43

   58 input_op: TK_PR_INPUT • TK_IDENTIFICADOR

    TK_IDENTIFICADOR  shift, and go to state 69


State 44

   59 output_op: TK_PR_OUTPUT • TK_IDENTIFICADOR
   60          | TK_PR_OUTPUT • literal

    TK_LIT_INT        shift, and go to state 70
    TK_LIT_FLOAT      shift, and go to state 71
    TK_LIT_FALSE      shift, and go to state 72
    TK_LIT_TRUE       shift, and go to state 73
    TK_LIT_CHAR       shift, and go to state 74
    TK_LIT_STRING     shift, and go to state 75
    TK_IDENTIFICADOR  shift, and go to state 76

    literal             go to state 77
    literal_numeric     go to state 78
    literal_alphabetic  go to state 79
    literal_boolean     go to state 80


State 45

   68 return_op: TK_PR_RETURN • expression

    TK_LIT_INT        shift, and go to state 70
    TK_LIT_FLOAT      shift, and go to state 71
    TK_IDENTIFICADOR  shift, and go to state 51
    '+'               shift, and go to state 81
    '-'               shift, and go to state 82
    '*'               shift, and go to state 83
    '&'               shift, and go to state 84
    '#'               shift, and go to state 85
    '!'               shift, and go to state 86
    '?'               shift, and go to state 87

    estrutura               go to state 88
    literal_numeric         go to state 89
    func_call               go to state 90
    expression              go to state 91
    arithmetic              go to state 92
    arithmetic_operand      go to state 93
    un_arithmetic_operator  go to state 94
    un_logic_operator       go to state 95
    ternary                 go to state 96
    logic                   go to state 97


State 46

   38 local_decl: TK_PR_CONST • type local_list

    TK_PR_INT     shift, and go to state 1
    TK_PR_FLOAT   shift, and go to state 2
    TK_PR_BOOL    shift, and go to state 3
    TK_PR_CHAR    shift, and go to state 4
    TK_PR_STRING  shift, and go to state 5

    type  go to state 98


State 47

   37 local_decl: TK_PR_STATIC • TK_PR_CONST type local_list
   39           | TK_PR_STATIC • type local_list

    TK_PR_INT     shift, and go to state 1
    TK_PR_FLOAT   shift, and go to state 2
    TK_PR_BOOL    shift, and go to state 3
    TK_PR_CHAR    shift, and go to state 4
    TK_PR_STRING  shift, and go to state 5
    TK_PR_CONST   shift, and go to state 99

    type  go to state 100


State 48

  112 iter_flow: TK_PR_FOR • '(' attribution ':' expression ':' attribution ')' command_block

    '('  shift, and go to state 101


State 49

   69 break_op: TK_PR_BREAK •

    $default  reduce using rule 69 (break_op)


State 50

   70 continue_op: TK_PR_CONTINUE •

    $default  reduce using rule 70 (continue_op)


State 51

    6 estrutura: TK_IDENTIFICADOR • '[' TK_LIT_INT ']'
    7          | TK_IDENTIFICADOR •
   61 func_call: TK_IDENTIFICADOR • '(' params ')'

    '['  shift, and go to state 21
    '('  shift, and go to state 102

    $default  reduce using rule 7 (estrutura)


State 52

   57 attribution: estrutura • '=' expression
   71 shift_op: estrutura • TK_OC_SL TK_LIT_INT
   72         | estrutura • TK_OC_SR TK_LIT_INT

    TK_OC_SL  shift, and go to state 103
    TK_OC_SR  shift, and go to state 104
    '='       shift, and go to state 105


State 53

   40 local_decl: type • local_list

    TK_IDENTIFICADOR  shift, and go to state 106

    local_list      go to state 107
    local_decl_aux  go to state 108


State 54

   23 command_block: '{' command_list • '}'

    '}'  shift, and go to state 109


State 55

   25 command_list: simple_command • command_list

    TK_PR_INT         shift, and go to state 1
    TK_PR_FLOAT       shift, and go to state 2
    TK_PR_BOOL        shift, and go to state 3
    TK_PR_CHAR        shift, and go to state 4
    TK_PR_STRING      shift, and go to state 5
    TK_PR_IF          shift, and go to state 41
    TK_PR_WHILE       shift, and go to state 42
    TK_PR_INPUT       shift, and go to state 43
    TK_PR_OUTPUT      shift, and go to state 44
    TK_PR_RETURN      shift, and go to state 45
    TK_PR_CONST       shift, and go to state 46
    TK_PR_STATIC      shift, and go to state 47
    TK_PR_FOR         shift, and go to state 48
    TK_PR_BREAK       shift, and go to state 49
    TK_PR_CONTINUE    shift, and go to state 50
    TK_IDENTIFICADOR  shift, and go to state 51

    $default  reduce using rule 24 (command_list)

    estrutura       go to state 52
    type            go to state 53
    command_list    go to state 110
    simple_command  go to state 55
    local_decl      go to state 56
    attribution     go to state 57
    input_op        go to state 58
    output_op       go to state 59
    func_call       go to state 60
    return_op       go to state 61
    break_op        go to state 62
    continue_op     go to state 63
    shift_op        go to state 64
    cond_flow       go to state 65
    iter_flow       go to state 66


State 56

   26 simple_command: local_decl • ';'

    ';'  shift, and go to state 111


State 57

   27 simple_command: attribution • ';'

    ';'  shift, and go to state 112


State 58

   28 simple_command: input_op • ';'

    ';'  shift, and go to state 113


State 59

   29 simple_command: output_op • ';'

    ';'  shift, and go to state 114


State 60

   30 simple_command: func_call • ';'

    ';'  shift, and go to state 115


State 61

   31 simple_command: return_op • ';'

    ';'  shift, and go to state 116


State 62

   32 simple_command: break_op • ';'

    ';'  shift, and go to state 117


State 63

   33 simple_command: continue_op • ';'

    ';'  shift, and go to state 118


State 64

   34 simple_command: shift_op • ';'

    ';'  shift, and go to state 119


State 65

   35 simple_command: cond_flow • ';'

    ';'  shift, and go to state 120


State 66

   36 simple_command: iter_flow • ';'

    ';'  shift, and go to state 121


State 67

  110 cond_flow: TK_PR_IF '(' • expression ')' command_block
  111          | TK_PR_IF '(' • expression ')' command_block TK_PR_ELSE command_block

    TK_LIT_INT        shift, and go to state 70
    TK_LIT_FLOAT      shift, and go to state 71
    TK_IDENTIFICADOR  shift, and go to state 51
    '+'               shift, and go to state 81
    '-'               shift, and go to state 82
    '*'               shift, and go to state 83
    '&'               shift, and go to state 84
    '#'               shift, and go to state 85
    '!'               shift, and go to state 86
    '?'               shift, and go to state 87

    estrutura               go to state 88
    literal_numeric         go to state 89
    func_call               go to state 90
    expression              go to state 122
    arithmetic              go to state 92
    arithmetic_operand      go to state 93
    un_arithmetic_operator  go to state 94
    un_logic_operator       go to state 95
    ternary                 go to state 96
    logic                   go to state 97


State 68

  113 iter_flow: TK_PR_WHILE '(' • expression ')' TK_PR_DO command_block

    TK_LIT_INT        shift, and go to state 70
    TK_LIT_FLOAT      shift, and go to state 71
    TK_IDENTIFICADOR  shift, and go to state 51
    '+'               shift, and go to state 81
    '-'               shift, and go to state 82
    '*'               shift, and go to state 83
    '&'               shift, and go to state 84
    '#'               shift, and go to state 85
    '!'               shift, and go to state 86
    '?'               shift, and go to state 87

    estrutura               go to state 88
    literal_numeric         go to state 89
    func_call               go to state 90
    expression              go to state 123
    arithmetic              go to state 92
    arithmetic_operand      go to state 93
    un_arithmetic_operator  go to state 94
    un_logic_operator       go to state 95
    ternary                 go to state 96
    logic                   go to state 97


State 69

   58 input_op: TK_PR_INPUT TK_IDENTIFICADOR •

    $default  reduce using rule 58 (input_op)


State 70

   46 literal_numeric: TK_LIT_INT •

    $default  reduce using rule 46 (literal_numeric)


State 71

   47 literal_numeric: TK_LIT_FLOAT •

    $default  reduce using rule 47 (literal_numeric)


State 72

   50 literal_boolean: TK_LIT_FALSE •

    $default  reduce using rule 50 (literal_boolean)


State 73

   51 literal_boolean: TK_LIT_TRUE •

    $default  reduce using rule 51 (literal_boolean)


State 74

   48 literal_alphabetic: TK_LIT_CHAR •

    $default  reduce using rule 48 (literal_alphabetic)


State 75

   49 literal_alphabetic: TK_LIT_STRING •

    $default  reduce using rule 49 (literal_alphabetic)


State 76

   59 output_op: TK_PR_OUTPUT TK_IDENTIFICADOR •

    $default  reduce using rule 59 (output_op)


State 77

   60 output_op: TK_PR_OUTPUT literal •

    $default  reduce using rule 60 (output_op)


State 78

   43 literal: literal_numeric •

    $default  reduce using rule 43 (literal)


State 79

   44 literal: literal_alphabetic •

    $default  reduce using rule 44 (literal)


State 80

   45 literal: literal_boolean •

    $default  reduce using rule 45 (literal)


State 81

   89 un_arithmetic_operator: '+' •

    $default  reduce using rule 89 (un_arithmetic_operator)


State 82

   90 un_arithmetic_operator: '-' •

    $default  reduce using rule 90 (un_arithmetic_operator)


State 83

   92 un_arithmetic_operator: '*' •

    $default  reduce using rule 92 (un_arithmetic_operator)


State 84

   91 un_arithmetic_operator: '&' •

    $default  reduce using rule 91 (un_arithmetic_operator)


State 85

   93 un_arithmetic_operator: '#' •

    $default  reduce using rule 93 (un_arithmetic_operator)


State 86

   94 un_logic_operator: '!' •

    $default  reduce using rule 94 (un_logic_operator)


State 87

   95 un_logic_operator: '?' •

    $default  reduce using rule 95 (un_logic_operator)


State 88

   80 arithmetic_operand: estrutura •

    $default  reduce using rule 80 (arithmetic_operand)


State 89

   81 arithmetic_operand: literal_numeric •

    $default  reduce using rule 81 (arithmetic_operand)


State 90

   82 arithmetic_operand: func_call •

    $default  reduce using rule 82 (arithmetic_operand)


State 91

   68 return_op: TK_PR_RETURN expression •
  106 ternary: expression • '?' expression ':' expression

    '?'  shift, and go to state 124

    $default  reduce using rule 68 (return_op)


State 92

   73 expression: arithmetic •
  107 logic: arithmetic • relational_op arithmetic

    TK_OC_LE  shift, and go to state 125
    TK_OC_GE  shift, and go to state 126
    TK_OC_EQ  shift, and go to state 127
    TK_OC_NE  shift, and go to state 128
    '>'       shift, and go to state 129
    '<'       shift, and go to state 130

    $default  reduce using rule 73 (expression)

    relational_op  go to state 131


State 93

   76 arithmetic: arithmetic_operand •
   79           | arithmetic_operand • bin_arithmetic_operator arithmetic
  109 logic: arithmetic_operand • bin_logic_operator arithmetic_operand logic

    '+'  shift, and go to state 132
    '-'  shift, and go to state 133
    '*'  shift, and go to state 134
    '/'  shift, and go to state 135
    '%'  shift, and go to state 136
    '^'  shift, and go to state 137
    '&'  shift, and go to state 138
    '|'  shift, and go to state 139

    $default  reduce using rule 76 (arithmetic)

    bin_arithmetic_operator  go to state 140
    bin_logic_operator       go to state 141


State 94

   77 arithmetic: un_arithmetic_operator • arithmetic_operand
   78           | un_arithmetic_operator • arithmetic_operand bin_arithmetic_operator arithmetic

    TK_LIT_INT        shift, and go to state 70
    TK_LIT_FLOAT      shift, and go to state 71
    TK_IDENTIFICADOR  shift, and go to state 51

    estrutura           go to state 88
    literal_numeric     go to state 89
    func_call           go to state 90
    arithmetic_operand  go to state 142


State 95

  108 logic: un_logic_operator • arithmetic_operand logic

    TK_LIT_INT        shift, and go to state 70
    TK_LIT_FLOAT      shift, and go to state 71
    TK_IDENTIFICADOR  shift, and go to state 51

    estrutura           go to state 88
    literal_numeric     go to state 89
    func_call           go to state 90
    arithmetic_operand  go to state 143


State 96

   75 expression: ternary •

    $default  reduce using rule 75 (expression)


State 97

   74 expression: logic •

    $default  reduce using rule 74 (expression)


State 98

   38 local_decl: TK_PR_CONST type • local_list

    TK_IDENTIFICADOR  shift, and go to state 106

    local_list      go to state 144
    local_decl_aux  go to state 108


State 99

   37 local_decl: TK_PR_STATIC TK_PR_CONST • type local_list

    TK_PR_INT     shift, and go to state 1
    TK_PR_FLOAT   shift, and go to state 2
    TK_PR_BOOL    shift, and go to state 3
    TK_PR_CHAR    shift, and go to state 4
    TK_PR_STRING  shift, and go to state 5

    type  go to state 145


State 100

   39 local_decl: TK_PR_STATIC type • local_list

    TK_IDENTIFICADOR  shift, and go to state 106

    local_list      go to state 146
    local_decl_aux  go to state 108


State 101

  112 iter_flow: TK_PR_FOR '(' • attribution ':' expression ':' attribution ')' command_block

    TK_IDENTIFICADOR  shift, and go to state 30

    estrutura    go to state 147
    attribution  go to state 148


State 102

   61 func_call: TK_IDENTIFICADOR '(' • params ')'

    TK_LIT_INT        shift, and go to state 70
    TK_LIT_FLOAT      shift, and go to state 71
    TK_LIT_FALSE      shift, and go to state 72
    TK_LIT_TRUE       shift, and go to state 73
    TK_LIT_CHAR       shift, and go to state 74
    TK_LIT_STRING     shift, and go to state 75
    TK_IDENTIFICADOR  shift, and go to state 149
    '+'               shift, and go to state 81
    '-'               shift, and go to state 82
    '*'               shift, and go to state 83
    '&'               shift, and go to state 84
    '#'               shift, and go to state 85
    '!'               shift, and go to state 86
    '?'               shift, and go to state 87

    $default  reduce using rule 64 (param)

    estrutura               go to state 88
    literal                 go to state 150
    literal_numeric         go to state 151
    literal_alphabetic      go to state 79
    literal_boolean         go to state 80
    func_call               go to state 90
    params                  go to state 152
    param                   go to state 153
    expression              go to state 154
    arithmetic              go to state 92
    arithmetic_operand      go to state 93
    un_arithmetic_operator  go to state 94
    un_logic_operator       go to state 95
    ternary                 go to state 96
    logic                   go to state 97


State 103

   71 shift_op: estrutura TK_OC_SL • TK_LIT_INT

    TK_LIT_INT  shift, and go to state 155


State 104

   72 shift_op: estrutura TK_OC_SR • TK_LIT_INT

    TK_LIT_INT  shift, and go to state 156


State 105

   57 attribution: estrutura '=' • expression

    TK_LIT_INT        shift, and go to state 70
    TK_LIT_FLOAT      shift, and go to state 71
    TK_IDENTIFICADOR  shift, and go to state 51
    '+'               shift, and go to state 81
    '-'               shift, and go to state 82
    '*'               shift, and go to state 83
    '&'               shift, and go to state 84
    '#'               shift, and go to state 85
    '!'               shift, and go to state 86
    '?'               shift, and go to state 87

    estrutura               go to state 88
    literal_numeric         go to state 89
    func_call               go to state 90
    expression              go to state 157
    arithmetic              go to state 92
    arithmetic_operand      go to state 93
    un_arithmetic_operator  go to state 94
    un_logic_operator       go to state 95
    ternary                 go to state 96
    logic                   go to state 97


State 106

   55 local_decl_aux: TK_IDENTIFICADOR •
   56               | TK_IDENTIFICADOR • TK_OC_LE value

    TK_OC_LE  shift, and go to state 158

    $default  reduce using rule 55 (local_decl_aux)


State 107

   40 local_decl: type local_list •

    $default  reduce using rule 40 (local_decl)


State 108

   52 local_list: local_decl_aux • local_list_aux

    ','  shift, and go to state 159

    $default  reduce using rule 53 (local_list_aux)

    local_list_aux  go to state 160


State 109

   23 command_block: '{' command_list '}' •

    $default  reduce using rule 23 (command_block)


State 110

   25 command_list: simple_command command_list •

    $default  reduce using rule 25 (command_list)


State 111

   26 simple_command: local_decl ';' •

    $default  reduce using rule 26 (simple_command)


State 112

   27 simple_command: attribution ';' •

    $default  reduce using rule 27 (simple_command)


State 113

   28 simple_command: input_op ';' •

    $default  reduce using rule 28 (simple_command)


State 114

   29 simple_command: output_op ';' •

    $default  reduce using rule 29 (simple_command)


State 115

   30 simple_command: func_call ';' •

    $default  reduce using rule 30 (simple_command)


State 116

   31 simple_command: return_op ';' •

    $default  reduce using rule 31 (simple_command)


State 117

   32 simple_command: break_op ';' •

    $default  reduce using rule 32 (simple_command)


State 118

   33 simple_command: continue_op ';' •

    $default  reduce using rule 33 (simple_command)


State 119

   34 simple_command: shift_op ';' •

    $default  reduce using rule 34 (simple_command)


State 120

   35 simple_command: cond_flow ';' •

    $default  reduce using rule 35 (simple_command)


State 121

   36 simple_command: iter_flow ';' •

    $default  reduce using rule 36 (simple_command)


State 122

  106 ternary: expression • '?' expression ':' expression
  110 cond_flow: TK_PR_IF '(' expression • ')' command_block
  111          | TK_PR_IF '(' expression • ')' command_block TK_PR_ELSE command_block

    ')'  shift, and go to state 161
    '?'  shift, and go to state 124


State 123

  106 ternary: expression • '?' expression ':' expression
  113 iter_flow: TK_PR_WHILE '(' expression • ')' TK_PR_DO command_block

    ')'  shift, and go to state 162
    '?'  shift, and go to state 124


State 124

  106 ternary: expression '?' • expression ':' expression

    TK_LIT_INT        shift, and go to state 70
    TK_LIT_FLOAT      shift, and go to state 71
    TK_IDENTIFICADOR  shift, and go to state 51
    '+'               shift, and go to state 81
    '-'               shift, and go to state 82
    '*'               shift, and go to state 83
    '&'               shift, and go to state 84
    '#'               shift, and go to state 85
    '!'               shift, and go to state 86
    '?'               shift, and go to state 87

    estrutura               go to state 88
    literal_numeric         go to state 89
    func_call               go to state 90
    expression              go to state 163
    arithmetic              go to state 92
    arithmetic_operand      go to state 93
    un_arithmetic_operator  go to state 94
    un_logic_operator       go to state 95
    ternary                 go to state 96
    logic                   go to state 97


State 125

  100 relational_op: TK_OC_LE •

    $default  reduce using rule 100 (relational_op)


State 126

  102 relational_op: TK_OC_GE •

    $default  reduce using rule 102 (relational_op)


State 127

  101 relational_op: TK_OC_EQ •

    $default  reduce using rule 101 (relational_op)


State 128

  103 relational_op: TK_OC_NE •

    $default  reduce using rule 103 (relational_op)


State 129

  104 relational_op: '>' •

    $default  reduce using rule 104 (relational_op)


State 130

  105 relational_op: '<' •

    $default  reduce using rule 105 (relational_op)


State 131

  107 logic: arithmetic relational_op • arithmetic

    TK_LIT_INT        shift, and go to state 70
    TK_LIT_FLOAT      shift, and go to state 71
    TK_IDENTIFICADOR  shift, and go to state 51
    '+'               shift, and go to state 81
    '-'               shift, and go to state 82
    '*'               shift, and go to state 83
    '&'               shift, and go to state 84
    '#'               shift, and go to state 85

    estrutura               go to state 88
    literal_numeric         go to state 89
    func_call               go to state 90
    arithmetic              go to state 164
    arithmetic_operand      go to state 165
    un_arithmetic_operator  go to state 94


State 132

   83 bin_arithmetic_operator: '+' •

    $default  reduce using rule 83 (bin_arithmetic_operator)


State 133

   84 bin_arithmetic_operator: '-' •

    $default  reduce using rule 84 (bin_arithmetic_operator)


State 134

   85 bin_arithmetic_operator: '*' •

    $default  reduce using rule 85 (bin_arithmetic_operator)


State 135

   86 bin_arithmetic_operator: '/' •

    $default  reduce using rule 86 (bin_arithmetic_operator)


State 136

   87 bin_arithmetic_operator: '%' •

    $default  reduce using rule 87 (bin_arithmetic_operator)


State 137

   88 bin_arithmetic_operator: '^' •

    $default  reduce using rule 88 (bin_arithmetic_operator)


State 138

   97 bin_logic_operator: '&' •
   99                   | '&' • '&'

    '&'  shift, and go to state 166

    $default  reduce using rule 97 (bin_logic_operator)


State 139

   96 bin_logic_operator: '|' •
   98                   | '|' • '|'

    '|'  shift, and go to state 167

    $default  reduce using rule 96 (bin_logic_operator)


State 140

   79 arithmetic: arithmetic_operand bin_arithmetic_operator • arithmetic

    TK_LIT_INT        shift, and go to state 70
    TK_LIT_FLOAT      shift, and go to state 71
    TK_IDENTIFICADOR  shift, and go to state 51
    '+'               shift, and go to state 81
    '-'               shift, and go to state 82
    '*'               shift, and go to state 83
    '&'               shift, and go to state 84
    '#'               shift, and go to state 85

    estrutura               go to state 88
    literal_numeric         go to state 89
    func_call               go to state 90
    arithmetic              go to state 168
    arithmetic_operand      go to state 165
    un_arithmetic_operator  go to state 94


State 141

  109 logic: arithmetic_operand bin_logic_operator • arithmetic_operand logic

    TK_LIT_INT        shift, and go to state 70
    TK_LIT_FLOAT      shift, and go to state 71
    TK_IDENTIFICADOR  shift, and go to state 51

    estrutura           go to state 88
    literal_numeric     go to state 89
    func_call           go to state 90
    arithmetic_operand  go to state 169


State 142

   77 arithmetic: un_arithmetic_operator arithmetic_operand •
   78           | un_arithmetic_operator arithmetic_operand • bin_arithmetic_operator arithmetic

    '+'  shift, and go to state 132
    '-'  shift, and go to state 133
    '*'  shift, and go to state 134
    '/'  shift, and go to state 135
    '%'  shift, and go to state 136
    '^'  shift, and go to state 137

    $default  reduce using rule 77 (arithmetic)

    bin_arithmetic_operator  go to state 170


State 143

  108 logic: un_logic_operator arithmetic_operand • logic

    TK_LIT_INT        shift, and go to state 70
    TK_LIT_FLOAT      shift, and go to state 71
    TK_IDENTIFICADOR  shift, and go to state 51
    '+'               shift, and go to state 81
    '-'               shift, and go to state 82
    '*'               shift, and go to state 83
    '&'               shift, and go to state 84
    '#'               shift, and go to state 85
    '!'               shift, and go to state 86
    '?'               shift, and go to state 87

    estrutura               go to state 88
    literal_numeric         go to state 89
    func_call               go to state 90
    arithmetic              go to state 171
    arithmetic_operand      go to state 93
    un_arithmetic_operator  go to state 94
    un_logic_operator       go to state 95
    logic                   go to state 172


State 144

   38 local_decl: TK_PR_CONST type local_list •

    $default  reduce using rule 38 (local_decl)


State 145

   37 local_decl: TK_PR_STATIC TK_PR_CONST type • local_list

    TK_IDENTIFICADOR  shift, and go to state 106

    local_list      go to state 173
    local_decl_aux  go to state 108


State 146

   39 local_decl: TK_PR_STATIC type local_list •

    $default  reduce using rule 39 (local_decl)


State 147

   57 attribution: estrutura • '=' expression

    '='  shift, and go to state 105


State 148

  112 iter_flow: TK_PR_FOR '(' attribution • ':' expression ':' attribution ')' command_block

    ':'  shift, and go to state 174


State 149

    6 estrutura: TK_IDENTIFICADOR • '[' TK_LIT_INT ']'
    7          | TK_IDENTIFICADOR •
   61 func_call: TK_IDENTIFICADOR • '(' params ')'
   66 param: TK_IDENTIFICADOR •

    '['  shift, and go to state 21
    '('  shift, and go to state 102

    ','       reduce using rule 7 (estrutura)
    ','       [reduce using rule 66 (param)]
    ')'       reduce using rule 7 (estrutura)
    ')'       [reduce using rule 66 (param)]
    $default  reduce using rule 7 (estrutura)


State 150

   65 param: literal •

    $default  reduce using rule 65 (param)


State 151

   43 literal: literal_numeric •
   81 arithmetic_operand: literal_numeric •

    ','       reduce using rule 43 (literal)
    ','       [reduce using rule 81 (arithmetic_operand)]
    ')'       reduce using rule 43 (literal)
    ')'       [reduce using rule 81 (arithmetic_operand)]
    $default  reduce using rule 81 (arithmetic_operand)


State 152

   61 func_call: TK_IDENTIFICADOR '(' params • ')'

    ')'  shift, and go to state 175


State 153

   62 params: param •
   63       | param • ',' params

    ','  shift, and go to state 176

    $default  reduce using rule 62 (params)


State 154

   67 param: expression •
  106 ternary: expression • '?' expression ':' expression

    '?'  shift, and go to state 124

    $default  reduce using rule 67 (param)


State 155

   71 shift_op: estrutura TK_OC_SL TK_LIT_INT •

    $default  reduce using rule 71 (shift_op)


State 156

   72 shift_op: estrutura TK_OC_SR TK_LIT_INT •

    $default  reduce using rule 72 (shift_op)


State 157

   57 attribution: estrutura '=' expression •
  106 ternary: expression • '?' expression ':' expression

    '?'  shift, and go to state 124

    $default  reduce using rule 57 (attribution)


State 158

   56 local_decl_aux: TK_IDENTIFICADOR TK_OC_LE • value

    TK_LIT_INT        shift, and go to state 70
    TK_LIT_FLOAT      shift, and go to state 71
    TK_LIT_FALSE      shift, and go to state 72
    TK_LIT_TRUE       shift, and go to state 73
    TK_LIT_CHAR       shift, and go to state 74
    TK_LIT_STRING     shift, and go to state 75
    TK_IDENTIFICADOR  shift, and go to state 177

    value               go to state 178
    literal             go to state 179
    literal_numeric     go to state 78
    literal_alphabetic  go to state 79
    literal_boolean     go to state 80


State 159

   54 local_list_aux: ',' • local_decl_aux local_list_aux

    TK_IDENTIFICADOR  shift, and go to state 106

    local_decl_aux  go to state 180


State 160

   52 local_list: local_decl_aux local_list_aux •

    $default  reduce using rule 52 (local_list)


State 161

  110 cond_flow: TK_PR_IF '(' expression ')' • command_block
  111          | TK_PR_IF '(' expression ')' • command_block TK_PR_ELSE command_block

    '{'  shift, and go to state 38

    command_block  go to state 181


State 162

  113 iter_flow: TK_PR_WHILE '(' expression ')' • TK_PR_DO command_block

    TK_PR_DO  shift, and go to state 182


State 163

  106 ternary: expression • '?' expression ':' expression
  106        | expression '?' expression • ':' expression

    '?'  shift, and go to state 124
    ':'  shift, and go to state 183


State 164

  107 logic: arithmetic relational_op arithmetic •

    $default  reduce using rule 107 (logic)


State 165

   76 arithmetic: arithmetic_operand •
   79           | arithmetic_operand • bin_arithmetic_operator arithmetic

    '+'  shift, and go to state 132
    '-'  shift, and go to state 133
    '*'  shift, and go to state 134
    '/'  shift, and go to state 135
    '%'  shift, and go to state 136
    '^'  shift, and go to state 137

    $default  reduce using rule 76 (arithmetic)

    bin_arithmetic_operator  go to state 140


State 166

   99 bin_logic_operator: '&' '&' •

    $default  reduce using rule 99 (bin_logic_operator)


State 167

   98 bin_logic_operator: '|' '|' •

    $default  reduce using rule 98 (bin_logic_operator)


State 168

   79 arithmetic: arithmetic_operand bin_arithmetic_operator arithmetic •

    $default  reduce using rule 79 (arithmetic)


State 169

  109 logic: arithmetic_operand bin_logic_operator arithmetic_operand • logic

    TK_LIT_INT        shift, and go to state 70
    TK_LIT_FLOAT      shift, and go to state 71
    TK_IDENTIFICADOR  shift, and go to state 51
    '+'               shift, and go to state 81
    '-'               shift, and go to state 82
    '*'               shift, and go to state 83
    '&'               shift, and go to state 84
    '#'               shift, and go to state 85
    '!'               shift, and go to state 86
    '?'               shift, and go to state 87

    estrutura               go to state 88
    literal_numeric         go to state 89
    func_call               go to state 90
    arithmetic              go to state 171
    arithmetic_operand      go to state 93
    un_arithmetic_operator  go to state 94
    un_logic_operator       go to state 95
    logic                   go to state 184


State 170

   78 arithmetic: un_arithmetic_operator arithmetic_operand bin_arithmetic_operator • arithmetic

    TK_LIT_INT        shift, and go to state 70
    TK_LIT_FLOAT      shift, and go to state 71
    TK_IDENTIFICADOR  shift, and go to state 51
    '+'               shift, and go to state 81
    '-'               shift, and go to state 82
    '*'               shift, and go to state 83
    '&'               shift, and go to state 84
    '#'               shift, and go to state 85

    estrutura               go to state 88
    literal_numeric         go to state 89
    func_call               go to state 90
    arithmetic              go to state 185
    arithmetic_operand      go to state 165
    un_arithmetic_operator  go to state 94


State 171

  107 logic: arithmetic • relational_op arithmetic

    TK_OC_LE  shift, and go to state 125
    TK_OC_GE  shift, and go to state 126
    TK_OC_EQ  shift, and go to state 127
    TK_OC_NE  shift, and go to state 128
    '>'       shift, and go to state 129
    '<'       shift, and go to state 130

    relational_op  go to state 131


State 172

  108 logic: un_logic_operator arithmetic_operand logic •

    $default  reduce using rule 108 (logic)


State 173

   37 local_decl: TK_PR_STATIC TK_PR_CONST type local_list •

    $default  reduce using rule 37 (local_decl)


State 174

  112 iter_flow: TK_PR_FOR '(' attribution ':' • expression ':' attribution ')' command_block

    TK_LIT_INT        shift, and go to state 70
    TK_LIT_FLOAT      shift, and go to state 71
    TK_IDENTIFICADOR  shift, and go to state 51
    '+'               shift, and go to state 81
    '-'               shift, and go to state 82
    '*'               shift, and go to state 83
    '&'               shift, and go to state 84
    '#'               shift, and go to state 85
    '!'               shift, and go to state 86
    '?'               shift, and go to state 87

    estrutura               go to state 88
    literal_numeric         go to state 89
    func_call               go to state 90
    expression              go to state 186
    arithmetic              go to state 92
    arithmetic_operand      go to state 93
    un_arithmetic_operator  go to state 94
    un_logic_operator       go to state 95
    ternary                 go to state 96
    logic                   go to state 97


State 175

   61 func_call: TK_IDENTIFICADOR '(' params ')' •

    $default  reduce using rule 61 (func_call)


State 176

   63 params: param ',' • params

    TK_LIT_INT        shift, and go to state 70
    TK_LIT_FLOAT      shift, and go to state 71
    TK_LIT_FALSE      shift, and go to state 72
    TK_LIT_TRUE       shift, and go to state 73
    TK_LIT_CHAR       shift, and go to state 74
    TK_LIT_STRING     shift, and go to state 75
    TK_IDENTIFICADOR  shift, and go to state 149
    '+'               shift, and go to state 81
    '-'               shift, and go to state 82
    '*'               shift, and go to state 83
    '&'               shift, and go to state 84
    '#'               shift, and go to state 85
    '!'               shift, and go to state 86
    '?'               shift, and go to state 87

    $default  reduce using rule 64 (param)

    estrutura               go to state 88
    literal                 go to state 150
    literal_numeric         go to state 151
    literal_alphabetic      go to state 79
    literal_boolean         go to state 80
    func_call               go to state 90
    params                  go to state 187
    param                   go to state 153
    expression              go to state 154
    arithmetic              go to state 92
    arithmetic_operand      go to state 93
    un_arithmetic_operator  go to state 94
    un_logic_operator       go to state 95
    ternary                 go to state 96
    logic                   go to state 97


State 177

   41 value: TK_IDENTIFICADOR •

    $default  reduce using rule 41 (value)


State 178

   56 local_decl_aux: TK_IDENTIFICADOR TK_OC_LE value •

    $default  reduce using rule 56 (local_decl_aux)


State 179

   42 value: literal •

    $default  reduce using rule 42 (value)


State 180

   54 local_list_aux: ',' local_decl_aux • local_list_aux

    ','  shift, and go to state 159

    $default  reduce using rule 53 (local_list_aux)

    local_list_aux  go to state 188


State 181

  110 cond_flow: TK_PR_IF '(' expression ')' command_block •
  111          | TK_PR_IF '(' expression ')' command_block • TK_PR_ELSE command_block

    TK_PR_ELSE  shift, and go to state 189

    $default  reduce using rule 110 (cond_flow)


State 182

  113 iter_flow: TK_PR_WHILE '(' expression ')' TK_PR_DO • command_block

    '{'  shift, and go to state 38

    command_block  go to state 190


State 183

  106 ternary: expression '?' expression ':' • expression

    TK_LIT_INT        shift, and go to state 70
    TK_LIT_FLOAT      shift, and go to state 71
    TK_IDENTIFICADOR  shift, and go to state 51
    '+'               shift, and go to state 81
    '-'               shift, and go to state 82
    '*'               shift, and go to state 83
    '&'               shift, and go to state 84
    '#'               shift, and go to state 85
    '!'               shift, and go to state 86
    '?'               shift, and go to state 87

    estrutura               go to state 88
    literal_numeric         go to state 89
    func_call               go to state 90
    expression              go to state 191
    arithmetic              go to state 92
    arithmetic_operand      go to state 93
    un_arithmetic_operator  go to state 94
    un_logic_operator       go to state 95
    ternary                 go to state 96
    logic                   go to state 97


State 184

  109 logic: arithmetic_operand bin_logic_operator arithmetic_operand logic •

    $default  reduce using rule 109 (logic)


State 185

   78 arithmetic: un_arithmetic_operator arithmetic_operand bin_arithmetic_operator arithmetic •

    $default  reduce using rule 78 (arithmetic)


State 186

  106 ternary: expression • '?' expression ':' expression
  112 iter_flow: TK_PR_FOR '(' attribution ':' expression • ':' attribution ')' command_block

    '?'  shift, and go to state 124
    ':'  shift, and go to state 192


State 187

   63 params: param ',' params •

    $default  reduce using rule 63 (params)


State 188

   54 local_list_aux: ',' local_decl_aux local_list_aux •

    $default  reduce using rule 54 (local_list_aux)


State 189

  111 cond_flow: TK_PR_IF '(' expression ')' command_block TK_PR_ELSE • command_block

    '{'  shift, and go to state 38

    command_block  go to state 193


State 190

  113 iter_flow: TK_PR_WHILE '(' expression ')' TK_PR_DO command_block •

    $default  reduce using rule 113 (iter_flow)


State 191

  106 ternary: expression • '?' expression ':' expression
  106        | expression '?' expression ':' expression •

    '?'  shift, and go to state 124

    '?'       [reduce using rule 106 (ternary)]
    $default  reduce using rule 106 (ternary)


State 192

  112 iter_flow: TK_PR_FOR '(' attribution ':' expression ':' • attribution ')' command_block

    TK_IDENTIFICADOR  shift, and go to state 30

    estrutura    go to state 147
    attribution  go to state 194


State 193

  111 cond_flow: TK_PR_IF '(' expression ')' command_block TK_PR_ELSE command_block •

    $default  reduce using rule 111 (cond_flow)


State 194

  112 iter_flow: TK_PR_FOR '(' attribution ':' expression ':' attribution • ')' command_block

    ')'  shift, and go to state 195


State 195

  112 iter_flow: TK_PR_FOR '(' attribution ':' expression ':' attribution ')' • command_block

    '{'  shift, and go to state 38

    command_block  go to state 196


State 196

  112 iter_flow: TK_PR_FOR '(' attribution ':' expression ':' attribution ')' command_block •

    $default  reduce using rule 112 (iter_flow)
